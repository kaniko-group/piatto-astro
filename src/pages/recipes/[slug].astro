---
import { fetchRecipes } from "../../utils/fetchRecipes";

// Fetching recipes to render the first post
const recipes = await fetchRecipes();
const post = recipes[0];

// ✅ Clean YouTube lazyload embeds at build time
post.content.rendered = post.content.rendered
  .replace(
    /<iframe([^>]+)data-src="([^"]+)"([^>]*)src="[^"]+"([^>]*)>/g,
    '<iframe$1src="$2"$3$4>'
  )
  .replace(/\s+loading="lazy"/g, '');

// ✅ Remove unwanted special characters or symbols
post.content.rendered = post.content.rendered.replace(/[^ -~]+/g, '');

// Tell Astro which pages to build
export async function getStaticPaths() {
  const posts = await fetchRecipes();
  return posts.map(post => ({
    params: { slug: post.slug },
  }));
}
---

<html>
  <head>
    <meta charset="UTF-8" />
    <title>{post.title.rendered}</title>
  </head>

  <body class="bg-white text-gray-900 font-sans p-6 md:p-10 max-w-screen-lg mx-auto mb-20">
    <h1 class="text-4xl font-extrabold mb-6 leading-tight">
      {post.title.rendered}
    </h1>

    {/* Render featured image */}
    {post._embedded?.['wp:featuredmedia']?.[0]?.source_url && (
      <img
        src={post._embedded['wp:featuredmedia'][0].source_url}
        alt={post.title.rendered}
        class="w-full rounded-xl my-8 shadow-lg"
      />
    )}

    {/* Render dynamic HTML content with Tailwind typography */}
    <div
      class="prose prose-lg max-w-none prose-headings:font-semibold prose-h1:text-3xl prose-h2:text-2xl prose-h3:text-xl prose-p:my-4 prose-img:my-6 prose-figure:my-6 prose-h1:mb-4 prose-h2:mb-4 prose-h3:mb-4"
      set:html={post.content.rendered}
    ></div>

    {/* Responsive YouTube embed fix */}
    <script is:inline>
      document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll("iframe[src*='youtube.com']").forEach(function (iframe) {
          const wrapper = document.createElement("div");
          wrapper.className = "w-full aspect-video my-6";

          iframe.classList.add("w-full", "h-full", "rounded-lg");

          iframe.parentNode.insertBefore(wrapper, iframe);
          wrapper.appendChild(iframe);
        });
      });
    </script>
  </body>
</html>
